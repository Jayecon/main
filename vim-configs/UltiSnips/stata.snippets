#<silent>  UltiSnips for Data Cleaning in Stata

snippet des "destring"
destrign ${1:var_list}
endsnippet

snippet tos "tostring"
tostrign ${1:var_list}
endsnippet

snippet ff "if roof"
if ( ${1:condition} ) {
	${2:in roof code here}
}
endsnippet

snippet fe "else roof"
else  {
	${1:in roof code here}
}
endsnippet

snippet fl "elseif roof"
elseif ( ${1:condition} ) {
	${2:in roof code here}
}
endsnippet

snippet fe "foreach roof"
foreach ${1:indicator} ${2:in/of}  ${3:value} {
	${4:in roof code here}
}
endsnippet

snippet fv "forvalue roof"
forvalue ${1:indicator} = ${2:exp} {
	${3:in roof code here}
}
endsnippet

snippet gen "generate variable"
generate ${1:newvar_name} = ${2:exp}
	label var $1 "${3:var_label}"
endsnippet

snippet !ms "not missing condition"
!missing(${1:var_name})
endsnippet

snippet ms "missing condition"
missing(${1:var_name})
endsnippet

snippet mvd "destring"
mvdecode ${1:var_list}, mv(${2:value_list})
endsnippet

snippet inl "inlist condition"
inlist(${1:var_name}, ${2:exp}})
endsnippet

snippet !inl "not inlist condition"
!inlist(${1:var_name}, ${2:exp}})
endsnippet

snippet inr "inrange"
inrange(${1:var_name}, ${2:min}, ${3:max})
endsnippet

snippet !inr "not inrange condition"
!inrange(${1:var_name}, ${2:min}, ${3:max})
endsnippet

snippet ld "value label set"
label defien ${1:value_name} ${3:value_list}
label value ${2:var_name}  $1
endsnippet

snippet lv "variable label"
label var ${1:var_name} "${2:var_label}"
endsnippet

snippet lo "local macro "
local ${1:macro name} ${2:macro exp}
endsnippet

snippet mer "merge"
merge ${1:1:1/n:n} ${2:var list} using ${3:file_name}
endsnippet

snippet oa "order alpha"
order ${1:var list} , alpha
endsnippet

snippet of "order first"
order ${1:var list} , first
endsnippet

snippet rp "replace"
replace ${1:varname} = ${2:exp} if ${3:condition}
endsnippet

snippet rn "rename"
rename ${1:varname} ${2:exp}
endsnippet

snippet '' "Local macro quote" b
\`${1:local macro}'
endsnippet

snippet "" "Str quote"
"${1:str}"
endsnippet

snippet '" "Str local macro quote"
"\`${1:local macro}'"
endsnippet

snippet () "parentheses quote"
(${1:exp})
endsnippet

snippet {} "braces quote"
{
	${1:exp}
}
endsnippet

snippet ,gen "Generate option"
 , generate("${1:str}")
endsnippet

snippet ,r "replace option"
 , replace
endsnippet

