    set nocompatible " no compatible with the original Vi
    filetype off
    " OS Specific Setting" {{{1
    if has('win32')
        " Language and Font " {{{2
        set langmenu=en_US.UTF-8
        language message en_US.UTF-8
        set enc=utf8
        set fileencoding=utf8
        set guifont=D2coding:h16:cANSI
        set guifontwide=D2coding:h16
        " }}}2
        "STATA Mapping {{{2
        nnoremap <F8> :!"c:\stata\stataMP-64.exe" doedit %:p<CR><CR>
        inoremap <F8> :!"c:\stata\stataMP-64.exe" doedit %:p<CR><CR>
        nnoremap <F9> :w<CR> :!"c:\stata\stataMP-64.exe" /e do %:p<CR>:! move %:t:r.log %:p:r.log <CR>:e %:p:r.log<CR>
        " }}}2
    elseif has('macunix')
        " Language and Font " {{{2
        set linespace=3
        set encoding=utf-8
        set fileencoding=utf8
        set guifont=D2Codingligature:h22
        set guifontwide=D2Codingligature:h20
        " }}}2
        "STATA {{{2
        nnoremap <F8> :! /Applications/Stata/StataMP.app/Contents/MacOS/StataMP doedit %:p<CR>
        inoremap <F8> :! /Applications/Stata/StataMP.app/Contents/MacOS/StataMP doedit %:p<CR>
        nnoremap <F9> :silent! /Applications/Stata/StataMP.app/Contents/MacOS/StataMP -e do % <CR>:silent!mv %:t:r.log %:p:r.log<CR>:e %:p:r.log <CR>
        " }}}2
    endif
    " }}}1
    "Plugins list{{{1
    call plug#begin('~/.vim/plugged') " Plugins will be downloaded under the specified directory.
        Plug 'junegunn/vim-plug'				"A minimalist Vim plugin manager
        Plug 'tpope/vim-sensible'
        Plug 'tpope/vim-surround'				"Quotation and Parenthesis
        Plug 'tpope/vim-fugitive'				"Git in the Vim
        Plug 'airblade/vim-gitgutter'			"shows a git diff in the sign column
        Plug 'scrooloose/nerdtree'				"A tree expolre plugins for Vim
        Plug 'scrooloose/syntastic'				"Syntax checking hacks for Vim
        Plug 'scrooloose/nerdcommenter'			"Vim plugin for commenting
        Plug 'nathanaelkane/vim-indent-guides'	"Indent guide
        Plug 'altercation/vim-colors-solarized'	"solarized color scheme
        Plug 'vim-airline/vim-airline'			"status/tabline for vim
        Plug 'vim-airline/vim-airline-themes'	"vim-airline themes
        Plug 'zizhongyan/vim-stata'				"Running Selected Do-File Lines in Stata
<<<<<<< Updated upstream
        Plug 'mhinz/vim-startify'               "The fancy start screen for vim
        Plug 'junegunn/fzf.vim'                 "
        Plug '/usr/local/opt/fzf'
=======
        Plug 'lervag/vimtex'				    "Running Selected Do-File Lines in Stata
>>>>>>> Stashed changes
    call plug#end()
    " }}}1
    " Plugins Specific Setting -------------------- {{{1
        " Indent Guide Settigng ---------------------- {{{2
            let g:indent_guides_enable_on_vim_startup = 1
            let g:indent_guides_guide_size = 1
            let g:indent_guides_start_level = 2
            set ts=4 sw=4 et
        " }}}2
        " NERDTree Settigng ---------------------- {{{2
            noremap <C-N> :NERDTreeToggle<CR>
            "open a NERDTree automatically when vim starts up
                "autocmd vimenter * NERDTree
            "open a NERDTree automatically when vim starts up if no files were specified
                "autocmd StdinReadPre * let s:std_in=1
                "autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
            "open NERDTree automatically when vim starts up on opening a directory
                "autocmd StdinReadPre * let s:std_in=1
                "autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif	
            "close vim if the only window left open is a NERDTree
                "autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
        " }}}2
        " Synatstic Settigng ---------------------- {{{2
            set statusline+=%#warningmsg#
            set statusline+=%{SyntasticStatuslineFlag()}
            set statusline+=%*
            let g:syntastic_always_populate_loc_list = 1
            let g:syntastic_auto_loc_list = 1
            let g:syntastic_check_on_open = 1
            let g:syntastic_check_on_wq = 0
        " }}}2
        " Solarized Settigng ---------------------- {{{2
            colorscheme solarized
            let g:solarized_menu=0
        " }}}2
        " Vim-airline Settigng ---------------------- {{{2
            let g:airline_theme='solarized'
            let g:airline#extensions#tabline#enabled = 1
            let g:airline#extensions#tabline#formatter = 'default'
            noremap <silent> <f5> :call BgToggle()<cr>
            function! BgToggle()
                if &background == 'dark'
                    let g:airline_solarized_bg='light'
                    set background=light
                else
                    let g:airline_solarized_bg='dark'
                    set background=dark
                endif
            endfunction
        " }}}2
        "Change Background by Time{{{2
            let currentHour = strftime("%H")
            let currentTime = strftime("%Y %b %d %T")
            if currentHour < 7 + 0
                let g:airline_solarized_bg='dark'
                set background=dark
            elseif currentHour < 18 + 0
                let g:airline_solarized_bg='light'
                set background=light
            else
                let g:airline_solarized_bg='dark'
                set background=dark
            endif
        "}}}2
    " }}}1
    " Environment Setting ---------------------- {{{1
        " Basic " {{{2
            set number				"Show line number
            set relativenumber		"Show line number relative
            set showmatch			"Show matching brackets when text indicator is over them
            set history=1000
            set backspace=eol,start,indent
            set visualbell
            set nocursorcolumn
            set foldmethod=marker
            set nolist
            set noautowrite
            syntax enable
        " }}}2
        " Diff {{{2
            if &diff
                set diff
                set scrollbind
                set cursorbind
                set scrollopt
                set nowrap
                set foldmethod=diff
                set diffopt=filler,vertical
            endif 
        "}}}2
        "Indentation{{{2
            set autoindent
            set showbreak=>>>>
            set smartindent
            set smarttab
            set tabstop=4
            set softtabstop=4
            set shiftwidth=4
        " }}}2
        "Search " {{{2
            set hlsearch "Highlighting Search
            set incsearch
                augroup vimrc-incsearch-highlight
                    autocmd!
                    autocmd CmdlineEnter /,\? :set hlsearch
                    autocmd CmdlineLeave /,\? :set nohlsearch
                augroup END
            set ignorecase	"To ignore case while searching
            set smartcase
        " }}}2
    " }}}1
    " Key Mappings ---------------------- {{{1
        " Global {{{2
            map <leader><leader> :echo 'It is ' . strftime('%c')<cr>
            map <leader>ev  :e $MYVIMRC<cr> 
            map <leader>eV  :vsplit $MYVIMRC<cr> 
            map <leader>sv  :w <cr>:source $MYVIMRC<cr>
            map <leader>bv  :w! ~/git/etc/myvimrc<cr>
            map <leader>uv  :e! ~/git/etc/myvimrc<cr>:w! $MYVIMRC<cr>:source $MYVIMRC<cr>
<<<<<<< Updated upstream
            map <silent> <leader>l   :silent set list!<cr>
            map <silent> <leader>w   :silent set autowrite!<cr>
            map <silent> <leader>box :cd ~/dropbox<cr> :pwd<cr>
            map <silent> <leader>git :cd ~/git<cr> :pwd<cr>
=======
            map <leader>l   :set list!<cr>
            map <silent> <leader>box :cd ~/dropbox<cr>
            map <silent> <leader>git :cd ~/git<cr>
>>>>>>> Stashed changes
        "}}}2
        " Insert Mode {{{2
            inoremap jk <esc>
        "}}}2
        " Normal Mode {{{2
            nnoremap <space> za
            nnoremap <c-w>. 10<c-w>>
            nnoremap <c-w>, 10<c-w><
            nnoremap <leader>" viw<esc>a"<esc>bi"<esc>ee
            nnoremap <leader>' viw<esc>a'<esc>bi`<esc>ee
            nnoremap <leader>> viw<esc>a><esc>bi<<esc>ee
            nnoremap <leader>) viw<esc>a)<esc>bi(<esc>ee
            nnoremap <leader>ff O/*{{{*/<esc>bf*a
            nnoremap <leader>fc o/*}}}*/<esc>
        "}}}2
        " Visual Mode {{{2
            vnoremap <space> iw
        "}}}2
        "Operator-pending Mode {{{2
            onoremap in( :<c-u>normal! f(vi(<cr>
            onoremap il( :<c-u>normal! F)vi(<cr>
            onoremap in' :<c-u>normal! f'vi'<cr>
            onoremap il' :<c-u>normal! F'vi'<cr>
            onoremap in` :<c-u>normal! f`vi`<cr>
            onoremap il` :<c-u>normal! F`vi`<cr>
            onoremap in" :<c-u>normal! f"vi"<cr>
            onoremap il" :<c-u>normal! F"vi"<cr>
            onoremap in[ :<c-u>normal! f[vi[<cr>
            onoremap il[ :<c-u>normal! F]vi[<cr>
            onoremap in{ :<c-u>normal! f{vi{<cr>
            onoremap il{ :<c-u>normal! F}vi{<cr>
            onoremap in< :<c-u>normal! f<vi<<cr>
            onoremap il< :<c-u>normal! F>vi<<cr>
        " }}} 2
        "Window Navigation {{{2
            nnoremap <C-h> <C-w>h
            nnoremap <C-j> <C-w>j
            nnoremap <C-k> <C-w>k
            nnoremap <C-l> <C-w>l
        " }}}2
        " Command Line {{{2
            cnoreabbrev VS vs<Bar>bnext
            cnoreabbrev VP vs<Bar>bprevious
            cnoreabbrev VD vert diffsplit
            cnoreabbrev W w
            cnoreabbrev Wq wq
            cnoreabbrev H vert h
            cnoreabbrev HR vert bo h
            cnoreabbrev Bd bd
        "}}}2
        " Buffer Opration{{{2
            function! SwitchToNextBuffer(incr)
              let help_buffer = (&filetype == 'help')
              let current = bufnr("%")
              let last = bufnr("$")
              let new = current + a:incr
              while 1
                if new != 0 && bufexists(new) && ((getbufvar(new, "&filetype") == 'help') == help_buffer)
                  execute ":buffer ".new
                  break
                else
                  let new = new + a:incr
                  if new < 1
                    let new = last
                  elseif new > last
                    let new = 1
                  endif
                  if new == current
                    break
                  endif
                endif
              endwhile
            endfunction
            "nnoremap <silent> <Tab> :call SwitchToNextBuffer(1)<CR>
            "nnoremap <silent> <S-Tab> :call SwitchToNextBuffer(-1)<CR>
            nnoremap <silent> <Tab> :bnext<CR>
            nnoremap <silent> <S-Tab> :bprevious<CR>
            nnoremap <Leader><Tab> :set nomore<Bar>:ls<Bar>:set more<CR>:b<Space>
        "}}}2
    " }}}1
